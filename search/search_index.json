{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harbor Provider \u00b6 Summary of what the provider is for, including use cases and links to app/service documentation. Example Usage \u00b6 # example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" } Argument Reference \u00b6 In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io , can also be specified with the HARBOR_ENDPOINT environment variable. username - (Required) Username for authorize at the harbor, can also be specified with the HARBOR_USERNAME environment variable. password - (Required) Password from given user, can also be specified with the HARBOR_PASSWORD environment variable. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false , can also be specified with the HARBOR_INSECURE environment variable. basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2.0 for Harbor V2 Deployments. Default: /api , can also be specified with the HARBOR_BASEPATH environment variable. Install the Custom Provider \u00b6 Download the Latest Release, published by . # for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64' ) # direct install to your personal plugin directory wget -qO- $LATEST_LINUX_RELEASE | tar -xvz -C ~/.terraform.d/plugins/linux_amd64/ Here a link to the Terraform Doc how to install third-party-plugins","title":"Getting Started"},{"location":"#harbor-provider","text":"Summary of what the provider is for, including use cases and links to app/service documentation.","title":"Harbor Provider"},{"location":"#example-usage","text":"# example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" }","title":"Example Usage"},{"location":"#argument-reference","text":"In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io , can also be specified with the HARBOR_ENDPOINT environment variable. username - (Required) Username for authorize at the harbor, can also be specified with the HARBOR_USERNAME environment variable. password - (Required) Password from given user, can also be specified with the HARBOR_PASSWORD environment variable. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false , can also be specified with the HARBOR_INSECURE environment variable. basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2.0 for Harbor V2 Deployments. Default: /api , can also be specified with the HARBOR_BASEPATH environment variable.","title":"Argument Reference"},{"location":"#install-the-custom-provider","text":"Download the Latest Release, published by . # for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64' ) # direct install to your personal plugin directory wget -qO- $LATEST_LINUX_RELEASE | tar -xvz -C ~/.terraform.d/plugins/linux_amd64/ Here a link to the Terraform Doc how to install third-party-plugins","title":"Install the Custom Provider"},{"location":"adr/","text":"Architectural Decision Log \u00b6 This log lists the architectural decisions for nolte/terraform-provider-harbor . ADR-0000 - Use Markdown Architectural Decision Records ADR-0001 - Need a GoBased ApiClient for Harbor For new ADRs, please use template.md as basis. More information on MADR is available at https://adr.github.io/madr/ . General information about architectural decision records is available at https://adr.github.io/ .","title":"Architectural Decision Log"},{"location":"adr/#architectural-decision-log","text":"This log lists the architectural decisions for nolte/terraform-provider-harbor . ADR-0000 - Use Markdown Architectural Decision Records ADR-0001 - Need a GoBased ApiClient for Harbor For new ADRs, please use template.md as basis. More information on MADR is available at https://adr.github.io/madr/ . General information about architectural decision records is available at https://adr.github.io/ .","title":"Architectural Decision Log"},{"location":"adr/0000-use-markdown-architectural-decision-records/","text":"Use Markdown Architectural Decision Records \u00b6 Context and Problem Statement \u00b6 We want to record architectural decisions made in this project. Which format and structure should these records follow? Considered Options \u00b6 MADR 2.1.2 \u2013 The Markdown Architectural Decision Records Michael Nygard's template \u2013 The first incarnation of the term \"ADR\" Sustainable Architectural Decisions \u2013 The Y-Statements Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record Formless \u2013 No conventions for file format and structure Decision Outcome \u00b6 Chosen option: \"MADR 2.1.2\", because Implicit assumptions should be made explicit. Design documentation is important to enable people understanding the decisions later on. See also A rational design process: How and why to fake it . The MADR format is lean and fits our development style. The MADR structure is comprehensible and facilitates usage & maintenance. The MADR project is vivid. Version 2.1.2 is the latest one available when starting to document ADRs.","title":"Use Markdown Architectural Decision Records"},{"location":"adr/0000-use-markdown-architectural-decision-records/#use-markdown-architectural-decision-records","text":"","title":"Use Markdown Architectural Decision Records"},{"location":"adr/0000-use-markdown-architectural-decision-records/#context-and-problem-statement","text":"We want to record architectural decisions made in this project. Which format and structure should these records follow?","title":"Context and Problem Statement"},{"location":"adr/0000-use-markdown-architectural-decision-records/#considered-options","text":"MADR 2.1.2 \u2013 The Markdown Architectural Decision Records Michael Nygard's template \u2013 The first incarnation of the term \"ADR\" Sustainable Architectural Decisions \u2013 The Y-Statements Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record Formless \u2013 No conventions for file format and structure","title":"Considered Options"},{"location":"adr/0000-use-markdown-architectural-decision-records/#decision-outcome","text":"Chosen option: \"MADR 2.1.2\", because Implicit assumptions should be made explicit. Design documentation is important to enable people understanding the decisions later on. See also A rational design process: How and why to fake it . The MADR format is lean and fits our development style. The MADR structure is comprehensible and facilitates usage & maintenance. The MADR project is vivid. Version 2.1.2 is the latest one available when starting to document ADRs.","title":"Decision Outcome"},{"location":"adr/0001-use-swagger-for-generate-http-client/","text":"Need a GoBased ApiClient for Harbor \u00b6 Status: accepted Date: 2020-05-01 Context and Problem Statement \u00b6 For a quick development from the Terraform Provider Functions, it makes sense to generate or use a HarborRestAPI Client. Considered Options \u00b6 Self Written Existing Swagger Based Decision Outcome \u00b6 Chosen option: \"Swagger Based\", because this solution supports the fastes development Start without writting any boilerplate code. Positive Consequences \u00b6 No Painfull HTTP Client Implementation Negative Consequences \u00b6 the API Client Implementation dependents to the Swagger Spec Quality... Pros and Cons of the Options \u00b6 Self Written \u00b6 Using a SelfWritten Api Client like the BESTSELLER/terraform-harbor-provider implementation. \ud83d\udc4d, because full flexibility, for api interactions. \ud83d\udc4d, because no external dependency. \ud83d\udc4e, because it make no fun to write a API Client, with Error Handling, Models etc. Existing \u00b6 Using one of the Exising projects like: moooofly/harbor-go-client , TimeBye/go-harbor or jiankunking/harbor-go-client \ud83d\udc4d, because no painfull Api Code. \ud83d\udc4e, because a hard external dependency to the supported client methodes. \ud83d\udc4e, because it needs changes at all existing implementation for use the full harbor Api Sets. Swagger Based \u00b6 Harbor Swagger \ud83d\udc4d, because no self written API Code. \ud83d\udc4d, because it support generate clients for different Harbor API Versions. \ud83d\udc4e, because depends to the SwaggerSpec Quality Swagger MissMatches \u00b6 The Swagger missmatch will be fixed by a json-patch . As base for the Client we use the Harbor V2, most of the interface are useable for v1. Links \u00b6 Github Harbor Swagger Issue #12474 evanphx/json-patch json-patch","title":"Need a GoBased ApiClient for Harbor"},{"location":"adr/0001-use-swagger-for-generate-http-client/#need-a-gobased-apiclient-for-harbor","text":"Status: accepted Date: 2020-05-01","title":"Need a GoBased ApiClient for Harbor"},{"location":"adr/0001-use-swagger-for-generate-http-client/#context-and-problem-statement","text":"For a quick development from the Terraform Provider Functions, it makes sense to generate or use a HarborRestAPI Client.","title":"Context and Problem Statement"},{"location":"adr/0001-use-swagger-for-generate-http-client/#considered-options","text":"Self Written Existing Swagger Based","title":"Considered Options"},{"location":"adr/0001-use-swagger-for-generate-http-client/#decision-outcome","text":"Chosen option: \"Swagger Based\", because this solution supports the fastes development Start without writting any boilerplate code.","title":"Decision Outcome"},{"location":"adr/0001-use-swagger-for-generate-http-client/#positive-consequences","text":"No Painfull HTTP Client Implementation","title":"Positive Consequences"},{"location":"adr/0001-use-swagger-for-generate-http-client/#negative-consequences","text":"the API Client Implementation dependents to the Swagger Spec Quality...","title":"Negative Consequences"},{"location":"adr/0001-use-swagger-for-generate-http-client/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options"},{"location":"adr/0001-use-swagger-for-generate-http-client/#self-written","text":"Using a SelfWritten Api Client like the BESTSELLER/terraform-harbor-provider implementation. \ud83d\udc4d, because full flexibility, for api interactions. \ud83d\udc4d, because no external dependency. \ud83d\udc4e, because it make no fun to write a API Client, with Error Handling, Models etc.","title":"Self Written"},{"location":"adr/0001-use-swagger-for-generate-http-client/#existing","text":"Using one of the Exising projects like: moooofly/harbor-go-client , TimeBye/go-harbor or jiankunking/harbor-go-client \ud83d\udc4d, because no painfull Api Code. \ud83d\udc4e, because a hard external dependency to the supported client methodes. \ud83d\udc4e, because it needs changes at all existing implementation for use the full harbor Api Sets.","title":"Existing"},{"location":"adr/0001-use-swagger-for-generate-http-client/#swagger-based","text":"Harbor Swagger \ud83d\udc4d, because no self written API Code. \ud83d\udc4d, because it support generate clients for different Harbor API Versions. \ud83d\udc4e, because depends to the SwaggerSpec Quality","title":"Swagger Based"},{"location":"adr/0001-use-swagger-for-generate-http-client/#swagger-missmatches","text":"The Swagger missmatch will be fixed by a json-patch . As base for the Client we use the Harbor V2, most of the interface are useable for v1.","title":"Swagger MissMatches"},{"location":"adr/0001-use-swagger-for-generate-http-client/#links","text":"Github Harbor Swagger Issue #12474 evanphx/json-patch json-patch","title":"Links "},{"location":"adr/template/","text":"[short title of solved problem and solution] \u00b6 Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL] Context and Problem Statement \u00b6 [Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.] Decision Drivers \u00b6 [driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026 Considered Options \u00b6 [option 1] [option 2] [option 3] \u2026 Decision Outcome \u00b6 Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)]. Positive Consequences \u00b6 [e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026 Negative Consequences \u00b6 [e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026 Pros and Cons of the Options \u00b6 [option 1] \u00b6 [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 2] \u00b6 [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 3] \u00b6 [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 Links \u00b6 [Link type] [Link to ADR] \u2026","title":"[short title of solved problem and solution]"},{"location":"adr/template/#short-title-of-solved-problem-and-solution","text":"Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL]","title":"[short title of solved problem and solution]"},{"location":"adr/template/#context-and-problem-statement","text":"[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]","title":"Context and Problem Statement"},{"location":"adr/template/#decision-drivers","text":"[driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026","title":"Decision Drivers "},{"location":"adr/template/#considered-options","text":"[option 1] [option 2] [option 3] \u2026","title":"Considered Options"},{"location":"adr/template/#decision-outcome","text":"Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].","title":"Decision Outcome"},{"location":"adr/template/#positive-consequences","text":"[e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026","title":"Positive Consequences "},{"location":"adr/template/#negative-consequences","text":"[e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026","title":"Negative Consequences "},{"location":"adr/template/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options "},{"location":"adr/template/#option-1","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 1]"},{"location":"adr/template/#option-2","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 2]"},{"location":"adr/template/#option-3","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 3]"},{"location":"adr/template/#links","text":"[Link type] [Link to ADR] \u2026","title":"Links "},{"location":"data_sources/harbor_label/","text":"Data Source: harbor_label \u00b6 Example Usage \u00b6 data \"harbor_label\" \"label_1\" { name = \"main\" scope = \"g\" } data \"harbor_label\" \"label_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, int) ID of the label. name - (Optional, string) Name of the label. scope - (Optional, string) Scope of the label. Attributes Reference \u00b6 id - (int) Unique ID of the label. name - (string) Name of the label. description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The colour the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to.","title":"harbor_label"},{"location":"data_sources/harbor_label/#data-source-harbor_label","text":"","title":"Data Source: harbor_label"},{"location":"data_sources/harbor_label/#example-usage","text":"data \"harbor_label\" \"label_1\" { name = \"main\" scope = \"g\" } data \"harbor_label\" \"label_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_label/#argument-reference","text":"id - (Optional, int) ID of the label. name - (Optional, string) Name of the label. scope - (Optional, string) Scope of the label.","title":"Argument Reference"},{"location":"data_sources/harbor_label/#attributes-reference","text":"id - (int) Unique ID of the label. name - (string) Name of the label. description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The colour the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to.","title":"Attributes Reference"},{"location":"data_sources/harbor_project/","text":"Data Source: harbor_project \u00b6 Example Usage \u00b6 data \"harbor_project\" \"project_1\" { name = \"main\" } data \"harbor_project\" \"project_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, int) ID of the project. name - (Optional, string) Name of the project. Attributes Reference \u00b6 id - (int) Unique ID of the project. name - (string) Name of the project.","title":"harbor_project"},{"location":"data_sources/harbor_project/#data-source-harbor_project","text":"","title":"Data Source: harbor_project"},{"location":"data_sources/harbor_project/#example-usage","text":"data \"harbor_project\" \"project_1\" { name = \"main\" } data \"harbor_project\" \"project_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_project/#argument-reference","text":"id - (Optional, int) ID of the project. name - (Optional, string) Name of the project.","title":"Argument Reference"},{"location":"data_sources/harbor_project/#attributes-reference","text":"id - (int) Unique ID of the project. name - (string) Name of the project.","title":"Attributes Reference"},{"location":"data_sources/harbor_registry/","text":"Data Source: harbor_registry \u00b6 Example Usage \u00b6 data \"harbor_registry\" \"registry_1\" { name = \"main\" } data \"harbor_registry\" \"registry_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, string) ID of the registry. name - (Optional, string) Name of the registry. Attributes Reference \u00b6 id - (int) Unique ID of the registry. name - (string) Name of the registry.","title":"harbor_registry"},{"location":"data_sources/harbor_registry/#data-source-harbor_registry","text":"","title":"Data Source: harbor_registry"},{"location":"data_sources/harbor_registry/#example-usage","text":"data \"harbor_registry\" \"registry_1\" { name = \"main\" } data \"harbor_registry\" \"registry_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_registry/#argument-reference","text":"id - (Optional, string) ID of the registry. name - (Optional, string) Name of the registry.","title":"Argument Reference"},{"location":"data_sources/harbor_registry/#attributes-reference","text":"id - (int) Unique ID of the registry. name - (string) Name of the registry.","title":"Attributes Reference"},{"location":"guides/development/","text":"Development \u00b6 Visual Studio Code DevContainer \u00b6 For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers . Precondition for Use \u00b6 Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make Process \u00b6 branch description master The master will only used for Presentation, and the Deployment process. tags/release/ All Created Releases must be start with a release/ prefix at the tag name. gh-pages Branch for the Static HTML presentation, generated by the GitHub Release Workflow. develop Branch for the current development, this branch will be used for integrate new Features, and starting the release flow. feature/* This are temporary branches for develop new functions. fix/* Used for bugfixing from existing versions, if no FastForward Fix Possible. Please use the develop branch for new features and fixes. Releasing \u00b6 The Github Release Assets will be automatic attach from the build job see .github/workflows/cicd-release.yml . Each Release will be start, at the moment , from the develop branch. The release description will be generated by release-drafter/release-drafter in a seperated workflow. Look to .github/workflows/release-drafter.yml for the Job, and .github/release-drafter.yml for the description configuration. Build \u00b6 The Build scripted at the moment splitted into the GitHub Workflow Stuff and a combination of Makefiles and Shell Scripts. The Makefile should be use for the local development, permanten using the full GitHub Workflows needs a lot of time. CI/CD \u00b6 For local usage the GitHub Actions we use the nektos/act Project. The first local execute will be take some time for pulling the large nektos/act-environments-ubuntu:18.04 image. Workflow Job Job Local Description build \ud83d\udc4d This is the Classic Build job with Static Tests, and compile the provider. releaseBuild \ud83d\udc4e This Job are used for attatch Release Assets to a existing GHRelease acc \ud83d\udc4e Starting a full run of Terraform Integration Tests, with starting a local kind cluster and deploy a v2 Harbor. shellcheck-check \ud83d\udc4d Check the Schell scripts for problems. devcontainers-check , docscontainers-check \ud83d\udc4e Simple build job for the both Dev Containers (VSCode and mkdocs) # call job act -j <job> -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 # example calling the build workflow act -j build -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 Since the Acception Tests Workflow is a matrix build, for better Tests again different Harbor Versions. It is not possible to run it locally, because the you can`t start two or more Kind Cluster out of the box locally. Feature Request #114 for call a specific Matrix Workflow. HarborAPI Client \u00b6 At the moment the Swagger Json for generate the Api Client, look ./docs/adr/0001-use-swagger-for-generate-http-client.md . For manipulate the Swagger Json, and generating a useable go api client, we use evanphx/json-patch inside the buildprocess, for adding or replace different JSonStructures. So if you need new manipulations, change the scripts/swagger-specs/patch.1.json patch file. More informations about jsonpatch . The problem are tracked, #12474 . Docs \u00b6 If you use the VSCode DevContainer , the mkdocs container will be started automatical, as a sidecar container. At the Development you ca access the current state from the Documentation at 127.0.0.1:8000 . For some extras, like Tasks List or Snippeds we use the pymdown-extensions pack. Development Shortcuts \u00b6 build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24 Links \u00b6 writing-custom-providers","title":"Development"},{"location":"guides/development/#development","text":"","title":"Development"},{"location":"guides/development/#visual-studio-code-devcontainer","text":"For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers .","title":"Visual Studio Code DevContainer"},{"location":"guides/development/#precondition-for-use","text":"Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make","title":"Precondition for Use"},{"location":"guides/development/#process","text":"branch description master The master will only used for Presentation, and the Deployment process. tags/release/ All Created Releases must be start with a release/ prefix at the tag name. gh-pages Branch for the Static HTML presentation, generated by the GitHub Release Workflow. develop Branch for the current development, this branch will be used for integrate new Features, and starting the release flow. feature/* This are temporary branches for develop new functions. fix/* Used for bugfixing from existing versions, if no FastForward Fix Possible. Please use the develop branch for new features and fixes.","title":"Process"},{"location":"guides/development/#releasing","text":"The Github Release Assets will be automatic attach from the build job see .github/workflows/cicd-release.yml . Each Release will be start, at the moment , from the develop branch. The release description will be generated by release-drafter/release-drafter in a seperated workflow. Look to .github/workflows/release-drafter.yml for the Job, and .github/release-drafter.yml for the description configuration.","title":"Releasing"},{"location":"guides/development/#build","text":"The Build scripted at the moment splitted into the GitHub Workflow Stuff and a combination of Makefiles and Shell Scripts. The Makefile should be use for the local development, permanten using the full GitHub Workflows needs a lot of time.","title":"Build"},{"location":"guides/development/#cicd","text":"For local usage the GitHub Actions we use the nektos/act Project. The first local execute will be take some time for pulling the large nektos/act-environments-ubuntu:18.04 image. Workflow Job Job Local Description build \ud83d\udc4d This is the Classic Build job with Static Tests, and compile the provider. releaseBuild \ud83d\udc4e This Job are used for attatch Release Assets to a existing GHRelease acc \ud83d\udc4e Starting a full run of Terraform Integration Tests, with starting a local kind cluster and deploy a v2 Harbor. shellcheck-check \ud83d\udc4d Check the Schell scripts for problems. devcontainers-check , docscontainers-check \ud83d\udc4e Simple build job for the both Dev Containers (VSCode and mkdocs) # call job act -j <job> -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 # example calling the build workflow act -j build -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 Since the Acception Tests Workflow is a matrix build, for better Tests again different Harbor Versions. It is not possible to run it locally, because the you can`t start two or more Kind Cluster out of the box locally. Feature Request #114 for call a specific Matrix Workflow.","title":"CI/CD"},{"location":"guides/development/#harborapi-client","text":"At the moment the Swagger Json for generate the Api Client, look ./docs/adr/0001-use-swagger-for-generate-http-client.md . For manipulate the Swagger Json, and generating a useable go api client, we use evanphx/json-patch inside the buildprocess, for adding or replace different JSonStructures. So if you need new manipulations, change the scripts/swagger-specs/patch.1.json patch file. More informations about jsonpatch . The problem are tracked, #12474 .","title":"HarborAPI Client"},{"location":"guides/development/#docs","text":"If you use the VSCode DevContainer , the mkdocs container will be started automatical, as a sidecar container. At the Development you ca access the current state from the Documentation at 127.0.0.1:8000 . For some extras, like Tasks List or Snippeds we use the pymdown-extensions pack.","title":"Docs"},{"location":"guides/development/#development-shortcuts","text":"build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24","title":"Development Shortcuts"},{"location":"guides/development/#links","text":"writing-custom-providers","title":"Links"},{"location":"guides/kind/","text":"E2E Tests With Kind \u00b6 For Quick and Easy Local Development it is Recommended to use a Vanilla Harbor installation. The Local Test environment will be used the Helm Chart from goharbor/harbor-helm . All relevant Makefile goals are prefixed with e2s_* . Goal Description e2e_prepare Configure the Kind based Env, and install the latest version from the Harbor Chart. e2e_prepare_harbor_v1 Install a Harbor v1 to the Kind Cluster e2e_prepare_harbor_v2 Install a Harbor v2 to the Kind Cluster e2e_test_v1 Starting the go based tests again a Harbor V1 Deployment e2e_test_v2 Starting the go based tests again a Harbor V2 Deployment e2e_test_classic Remove the current kind cluster. e2e_clean_harbor Delete the Harbor helm chart from kind cluster e2e_clean_cluster Remove the current kind cluster. The same flavore of tests will be integrated into the CI/CD Process. Befor you execute e2e_prepare ensure that the INGRESS_DOMAIN to your local host (By default we use the Docker Bridge Network Interface like 172-17-0-1.sslip.io .) example without change any files ./scripts/tst-00-prepare-kind.sh \"2.1.0\" ./scripts/tst-01-prepare-harbor.sh \"10-42-0-100.sslip.io\" \"1.2.0\" As wildcard DNS we use a service like sslip.io . The scripts will be starting the Kind Cluster with Ingress Support , as Ingress Controller we use Nginx . The Kind installation is part of the used Visual Studio Code Devcontainer Go Based Tests \u00b6 For quick response and tests near the Code we use Terrafomr Go Acceptance Tests . make e2e_test Tests will be matchs by the file name prefix *_test.go . Terraform File Based Tests \u00b6 The Classic Terraform File based tests are located at scripts/test/tf-acception-test . # compile the provider make compile # copy provider to local ~/.terraform.d/plugins/linux_amd64 folder make install # start the tests make e2e_test_classic","title":"Local E2E Tests"},{"location":"guides/kind/#e2e-tests-with-kind","text":"For Quick and Easy Local Development it is Recommended to use a Vanilla Harbor installation. The Local Test environment will be used the Helm Chart from goharbor/harbor-helm . All relevant Makefile goals are prefixed with e2s_* . Goal Description e2e_prepare Configure the Kind based Env, and install the latest version from the Harbor Chart. e2e_prepare_harbor_v1 Install a Harbor v1 to the Kind Cluster e2e_prepare_harbor_v2 Install a Harbor v2 to the Kind Cluster e2e_test_v1 Starting the go based tests again a Harbor V1 Deployment e2e_test_v2 Starting the go based tests again a Harbor V2 Deployment e2e_test_classic Remove the current kind cluster. e2e_clean_harbor Delete the Harbor helm chart from kind cluster e2e_clean_cluster Remove the current kind cluster. The same flavore of tests will be integrated into the CI/CD Process. Befor you execute e2e_prepare ensure that the INGRESS_DOMAIN to your local host (By default we use the Docker Bridge Network Interface like 172-17-0-1.sslip.io .) example without change any files ./scripts/tst-00-prepare-kind.sh \"2.1.0\" ./scripts/tst-01-prepare-harbor.sh \"10-42-0-100.sslip.io\" \"1.2.0\" As wildcard DNS we use a service like sslip.io . The scripts will be starting the Kind Cluster with Ingress Support , as Ingress Controller we use Nginx . The Kind installation is part of the used Visual Studio Code Devcontainer","title":"E2E Tests With Kind"},{"location":"guides/kind/#go-based-tests","text":"For quick response and tests near the Code we use Terrafomr Go Acceptance Tests . make e2e_test Tests will be matchs by the file name prefix *_test.go .","title":"Go Based Tests"},{"location":"guides/kind/#terraform-file-based-tests","text":"The Classic Terraform File based tests are located at scripts/test/tf-acception-test . # compile the provider make compile # copy provider to local ~/.terraform.d/plugins/linux_amd64 folder make install # start the tests make e2e_test_classic","title":"Terraform File Based Tests"},{"location":"resources/harbor_config_system/","text":"Resource: harbor_config_system \u00b6 Example Usage \u00b6 resource \"harbor_config_system\" \"main\" { project_creation_restriction = \"adminonly\" robot_token_expiration = 5259492 } Argument Reference \u00b6 The following arguments are supported: project_creation_restriction - (Optional) Who can create projects within Harbor. Can be \"adminonly\" or \"everyone\" robot_token_expiration - (Optional) The amount of time in minutes a robot account will expiry. NOTE: If the time is set to high you will get a 500 internal server error message when creating robot accounts","title":"harbor_config_system"},{"location":"resources/harbor_config_system/#resource-harbor_config_system","text":"","title":"Resource: harbor_config_system"},{"location":"resources/harbor_config_system/#example-usage","text":"resource \"harbor_config_system\" \"main\" { project_creation_restriction = \"adminonly\" robot_token_expiration = 5259492 }","title":"Example Usage"},{"location":"resources/harbor_config_system/#argument-reference","text":"The following arguments are supported: project_creation_restriction - (Optional) Who can create projects within Harbor. Can be \"adminonly\" or \"everyone\" robot_token_expiration - (Optional) The amount of time in minutes a robot account will expiry. NOTE: If the time is set to high you will get a 500 internal server error message when creating robot accounts","title":"Argument Reference"},{"location":"resources/harbor_configuration/","text":"Resource: harbor_config_auth \u00b6 Example Usage \u00b6 resource \"harbor_config_auth\" \"oidc\" { auth_mode = \"oidc_auth\" oidc_name = \"azure\" oidc_endpoint = \"https://login.microsoftonline.com/{GUID goes here}/v2.0\" oidc_client_id = \"OIDC Client ID goes here\" oidc_client_secret = \"ODDC Client Secret goes here\" oidc_scope = \"openid,email\" oidc_verify_cert = true } Argument Reference \u00b6 The following arguments are supported: auth_mode - (Required) Harbor authentication mode. Can be \"oidc_auth\" or \"db_auth\" . (Default: \"db_auth\" ) oidc_name - (Optional) The name of the oidc provider name. (Required - if auth_mode set to oidc_auth ) oidc_endpoint - (Optional) The URL of an OIDC-complaint server. (Required - if auth_mode set to oidc_auth ) oidc_client_id - (Optional) The client id for the oidc server. (Required - if auth_mode set to oidc_auth ) oidc_client_serect - (Optional) The client secret for the oidc server. (Required - if auth_mode set to oidc_auth ) oidc_groups_claim - (Optional) The name of the claim in the token whose values is the list of group names. NOTE: \"oidc_groups_claim\" can only be used with harbor version v1.10.1 and above oidc_scope - (Optional) The scope sent to OIDC server during authentication. It has to contain \u201copenid\u201d. (Required - if auth_mode set to oidc_auth ) oidc_verify_cert - (Optional) Set to \"false\" if your OIDC server is using a self-signed certificate. (Required - if auth_mode set to oidc_auth )","title":"harbor_configuration"},{"location":"resources/harbor_configuration/#resource-harbor_config_auth","text":"","title":"Resource: harbor_config_auth"},{"location":"resources/harbor_configuration/#example-usage","text":"resource \"harbor_config_auth\" \"oidc\" { auth_mode = \"oidc_auth\" oidc_name = \"azure\" oidc_endpoint = \"https://login.microsoftonline.com/{GUID goes here}/v2.0\" oidc_client_id = \"OIDC Client ID goes here\" oidc_client_secret = \"ODDC Client Secret goes here\" oidc_scope = \"openid,email\" oidc_verify_cert = true }","title":"Example Usage"},{"location":"resources/harbor_configuration/#argument-reference","text":"The following arguments are supported: auth_mode - (Required) Harbor authentication mode. Can be \"oidc_auth\" or \"db_auth\" . (Default: \"db_auth\" ) oidc_name - (Optional) The name of the oidc provider name. (Required - if auth_mode set to oidc_auth ) oidc_endpoint - (Optional) The URL of an OIDC-complaint server. (Required - if auth_mode set to oidc_auth ) oidc_client_id - (Optional) The client id for the oidc server. (Required - if auth_mode set to oidc_auth ) oidc_client_serect - (Optional) The client secret for the oidc server. (Required - if auth_mode set to oidc_auth ) oidc_groups_claim - (Optional) The name of the claim in the token whose values is the list of group names. NOTE: \"oidc_groups_claim\" can only be used with harbor version v1.10.1 and above oidc_scope - (Optional) The scope sent to OIDC server during authentication. It has to contain \u201copenid\u201d. (Required - if auth_mode set to oidc_auth ) oidc_verify_cert - (Optional) Set to \"false\" if your OIDC server is using a self-signed certificate. (Required - if auth_mode set to oidc_auth )","title":"Argument Reference"},{"location":"resources/harbor_label/","text":"Resource: harbor_label \u00b6 Harbor Doc: Managing Labels Harbor Api: /labels Example Usage \u00b6 resource \"harbor_label\" \"main\" { name = \"testlabel\" description = \"Test Label\" color = \"#61717D\" scope = \"g\" } resource \"harbor_label\" \"project_label\" { name = \"projectlabel\" description = \"Test Label for Project\" color = \"#333333\" scope = \"p\" project_id = harbor_project.main.id } Argument Reference \u00b6 The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The colour the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to, must be set if scope project. Attributes Reference \u00b6 In addition to all argument, the following attributes are exported: id - The id of the registry with harbor. Import \u00b6 Harbor Projects can be imported using the harbor_label , e.g. terraform import harbor_label.helmhub 1","title":"harbor_label"},{"location":"resources/harbor_label/#resource-harbor_label","text":"Harbor Doc: Managing Labels Harbor Api: /labels","title":"Resource: harbor_label"},{"location":"resources/harbor_label/#example-usage","text":"resource \"harbor_label\" \"main\" { name = \"testlabel\" description = \"Test Label\" color = \"#61717D\" scope = \"g\" } resource \"harbor_label\" \"project_label\" { name = \"projectlabel\" description = \"Test Label for Project\" color = \"#333333\" scope = \"p\" project_id = harbor_project.main.id }","title":"Example Usage"},{"location":"resources/harbor_label/#argument-reference","text":"The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The colour the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to, must be set if scope project.","title":"Argument Reference"},{"location":"resources/harbor_label/#attributes-reference","text":"In addition to all argument, the following attributes are exported: id - The id of the registry with harbor.","title":"Attributes Reference"},{"location":"resources/harbor_label/#import","text":"Harbor Projects can be imported using the harbor_label , e.g. terraform import harbor_label.helmhub 1","title":"Import"},{"location":"resources/harbor_project/","text":"Resource: harbor_project \u00b6 Handle a Harbor Project Resource . Example Usage \u00b6 resource \"harbor_project\" \"main\" { name = \"main\" public = false # (Optional) Default value is false vulnerability_scanning = true # (Optional) Default vale is true. Automatically scan images on push } Argument Reference \u00b6 The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: public - (Optional) Handle the access to the hosted images. Default: true If true Any user can pull images from this project. This is a convenient way for you to share repositories with others. If false Only users who are members of the project can pull images vulnerability_scanning - (Optional) Activate Vulnerability Scanning . Default: true Attributes Reference \u00b6 In addition to all arguments above, the following attributes are exported: id - Harbor Project ID. Import \u00b6 Harbor Projects can be imported using the harbor_project , e.g. $ terraform import harbor_project.main 1","title":"harbor_project"},{"location":"resources/harbor_project/#resource-harbor_project","text":"Handle a Harbor Project Resource .","title":"Resource: harbor_project"},{"location":"resources/harbor_project/#example-usage","text":"resource \"harbor_project\" \"main\" { name = \"main\" public = false # (Optional) Default value is false vulnerability_scanning = true # (Optional) Default vale is true. Automatically scan images on push }","title":"Example Usage"},{"location":"resources/harbor_project/#argument-reference","text":"The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: public - (Optional) Handle the access to the hosted images. Default: true If true Any user can pull images from this project. This is a convenient way for you to share repositories with others. If false Only users who are members of the project can pull images vulnerability_scanning - (Optional) Activate Vulnerability Scanning . Default: true","title":"Argument Reference"},{"location":"resources/harbor_project/#attributes-reference","text":"In addition to all arguments above, the following attributes are exported: id - Harbor Project ID.","title":"Attributes Reference"},{"location":"resources/harbor_project/#import","text":"Harbor Projects can be imported using the harbor_project , e.g. $ terraform import harbor_project.main 1","title":"Import"},{"location":"resources/harbor_project_member/","text":"Resource: harbor_project_member \u00b6 Example Usage \u00b6 resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_usergroup\" \"developers\" { name = \"developers\" type = \"http\" } resource \"harbor_project_member\" \"developers_main\" { project_id = harbor_project.main.id role = \"guest\" group_type = \"http\" group_name = harbor_usergroup.developers.name } Argument Reference \u00b6 The following arguments are supported: role - (Required) The role permission to be given to the group: project_admin , master , developer , guest or limited_guest . group_type - (Required) The group type: ldap , http or oidc . project_id - (Required) The project id of the project to be given permission to the group members. group_name - (Required) The name of the user group to be given permissions for the project. Attributes Reference \u00b6 In addition to all arguments, the following attribute is exported: id - The id of the project account: format is ${project_id}/${group_id} . Import \u00b6 Harbor Project member can be imported using the harbor_project_member , e.g. terraform import harbor_project_member.developers_main 12 /5 Known limitations \u00b6 The provider currently only handles group membership, not user.","title":"harbor_project_member"},{"location":"resources/harbor_project_member/#resource-harbor_project_member","text":"","title":"Resource: harbor_project_member"},{"location":"resources/harbor_project_member/#example-usage","text":"resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_usergroup\" \"developers\" { name = \"developers\" type = \"http\" } resource \"harbor_project_member\" \"developers_main\" { project_id = harbor_project.main.id role = \"guest\" group_type = \"http\" group_name = harbor_usergroup.developers.name }","title":"Example Usage"},{"location":"resources/harbor_project_member/#argument-reference","text":"The following arguments are supported: role - (Required) The role permission to be given to the group: project_admin , master , developer , guest or limited_guest . group_type - (Required) The group type: ldap , http or oidc . project_id - (Required) The project id of the project to be given permission to the group members. group_name - (Required) The name of the user group to be given permissions for the project.","title":"Argument Reference"},{"location":"resources/harbor_project_member/#attributes-reference","text":"In addition to all arguments, the following attribute is exported: id - The id of the project account: format is ${project_id}/${group_id} .","title":"Attributes Reference"},{"location":"resources/harbor_project_member/#import","text":"Harbor Project member can be imported using the harbor_project_member , e.g. terraform import harbor_project_member.developers_main 12 /5","title":"Import"},{"location":"resources/harbor_project_member/#known-limitations","text":"The provider currently only handles group membership, not user.","title":"Known limitations"},{"location":"resources/harbor_registry/","text":"Resource: harbor_registry \u00b6 Harbor Doc: managing-registries Harbor Api: Create Example Usage \u00b6 resource \"harbor_registry\" \"helmhub\" { name = \"helmhub\" url = \"https://hub.helm.sh\" type = \"helm-hub\" description = \"Helm Hub Registry\" insecure = false } Argument Reference \u00b6 The following arguments are supported: name - (Required) of the project that will be created in harbor. url - (Required) The registry remote endpoint, like https://hub.docker.com . type - (Required) registry Type possible values are huawei-SWR, aws-ecr, ali-acr, jfrog-artifactory, gitlab, docker-registry, docker-hub, azure-acr, quay-io, helm-hub, harbor, google-gcr . description - (Optional) The description of the registry will be displayed in harbor. insecure - (Optional) Harbor ignores insecure external registry errors. Can be set to true or false (Default: false ) Attributes Reference \u00b6 In addition to all argument, the following attributes are exported: id - The id of the registry with harbor. Import \u00b6 Harbor Projects can be imported using the harbor_registry , e.g. terraform import harbor_registry.helmhub 1","title":"harbor_registry"},{"location":"resources/harbor_registry/#resource-harbor_registry","text":"Harbor Doc: managing-registries Harbor Api: Create","title":"Resource: harbor_registry"},{"location":"resources/harbor_registry/#example-usage","text":"resource \"harbor_registry\" \"helmhub\" { name = \"helmhub\" url = \"https://hub.helm.sh\" type = \"helm-hub\" description = \"Helm Hub Registry\" insecure = false }","title":"Example Usage"},{"location":"resources/harbor_registry/#argument-reference","text":"The following arguments are supported: name - (Required) of the project that will be created in harbor. url - (Required) The registry remote endpoint, like https://hub.docker.com . type - (Required) registry Type possible values are huawei-SWR, aws-ecr, ali-acr, jfrog-artifactory, gitlab, docker-registry, docker-hub, azure-acr, quay-io, helm-hub, harbor, google-gcr . description - (Optional) The description of the registry will be displayed in harbor. insecure - (Optional) Harbor ignores insecure external registry errors. Can be set to true or false (Default: false )","title":"Argument Reference"},{"location":"resources/harbor_registry/#attributes-reference","text":"In addition to all argument, the following attributes are exported: id - The id of the registry with harbor.","title":"Attributes Reference"},{"location":"resources/harbor_registry/#import","text":"Harbor Projects can be imported using the harbor_registry , e.g. terraform import harbor_registry.helmhub 1","title":"Import"},{"location":"resources/harbor_replication/","text":"Resource: harbor_replication \u00b6 Harbor Doc: configuring-replication Example Usage \u00b6 data \"harbor_project\" \"project_replica\" { name = \"main\" } data \"harbor_registry\" \"registry_helm_hub\" { name = \"helmhub\" } data \"harbor_registry\" \"registry_docker_hub\" { name = \"dockerhub\" } resource \"harbor_replication\" \"pull_based_helm\" { name = \"acc-helm-prometheus-operator-test\" description = \"Prometheus Operator Replica\" source_registry_id = data.harbor_registry.registry_replica_helm_hub.id source_registry_filter_name = \"stable/prometheus-operator\" source_registry_filter_tag = \"**\" destination_namespace = data.harbor_project.project_replica.name } resource \"harbor_replication_pull\" \"push_based_docker\" { name = \"docker-push\" description = \"Push Docker\" destination_registry_id = data.harbor_registry.registry_docker_hub.id destination_namespace = \"notexisting\" source_registry_filter_name = \"${data.harbor_project.project_replica.name}/vscode-devcontainers/k8s-operator\" source_registry_filter_tag = \"**\" } Argument Reference \u00b6 The following arguments are supported: name - (Required) of the replication that will be created in harbor. description - (Optional) of replication that will be displayed in harbor. source_registry_id - (Optional) Used for pull the resources from the remote registry to the local Harbor. source_registry_filter_name - (Optional) Filter the name of the resource. Leave empty or use '**' to match all. 'library/**' only matches resources under 'library'. source_registry_filter_tag - (Optional) Filter the tag/version part of the resources. Leave empty or use '**' to match all. '1.0*' only matches the tags that starts with '1.0'. destination_namespace - (Optional) Destination namespace Specify the destination namespace. If empty, the resources will be put under the same namespace as the source. destination_registry_id - (Optional) The target Registry ID, used only for push-based replications. trigger_mode - (Optional) Can be manual , scheduled and for push-based addition event_based , Default: manual trigger_cron - (Optional) Used cron for scheduled trigger mode, like * * 5 * * * override - (Optional) Specify whether to override the resources at the destination if a resource with the same name exists. Default: false enabled - (Optional) Attributes Reference \u00b6 In addition to all argument, the following attributes are exported: id - The id of the registry policy with harbor. Import \u00b6 Harbor Projects can be imported using the harbor_replication , e.g. terraform import harbor_replication.helmhub_prometheus 1","title":"harbor_replication"},{"location":"resources/harbor_replication/#resource-harbor_replication","text":"Harbor Doc: configuring-replication","title":"Resource: harbor_replication"},{"location":"resources/harbor_replication/#example-usage","text":"data \"harbor_project\" \"project_replica\" { name = \"main\" } data \"harbor_registry\" \"registry_helm_hub\" { name = \"helmhub\" } data \"harbor_registry\" \"registry_docker_hub\" { name = \"dockerhub\" } resource \"harbor_replication\" \"pull_based_helm\" { name = \"acc-helm-prometheus-operator-test\" description = \"Prometheus Operator Replica\" source_registry_id = data.harbor_registry.registry_replica_helm_hub.id source_registry_filter_name = \"stable/prometheus-operator\" source_registry_filter_tag = \"**\" destination_namespace = data.harbor_project.project_replica.name } resource \"harbor_replication_pull\" \"push_based_docker\" { name = \"docker-push\" description = \"Push Docker\" destination_registry_id = data.harbor_registry.registry_docker_hub.id destination_namespace = \"notexisting\" source_registry_filter_name = \"${data.harbor_project.project_replica.name}/vscode-devcontainers/k8s-operator\" source_registry_filter_tag = \"**\" }","title":"Example Usage"},{"location":"resources/harbor_replication/#argument-reference","text":"The following arguments are supported: name - (Required) of the replication that will be created in harbor. description - (Optional) of replication that will be displayed in harbor. source_registry_id - (Optional) Used for pull the resources from the remote registry to the local Harbor. source_registry_filter_name - (Optional) Filter the name of the resource. Leave empty or use '**' to match all. 'library/**' only matches resources under 'library'. source_registry_filter_tag - (Optional) Filter the tag/version part of the resources. Leave empty or use '**' to match all. '1.0*' only matches the tags that starts with '1.0'. destination_namespace - (Optional) Destination namespace Specify the destination namespace. If empty, the resources will be put under the same namespace as the source. destination_registry_id - (Optional) The target Registry ID, used only for push-based replications. trigger_mode - (Optional) Can be manual , scheduled and for push-based addition event_based , Default: manual trigger_cron - (Optional) Used cron for scheduled trigger mode, like * * 5 * * * override - (Optional) Specify whether to override the resources at the destination if a resource with the same name exists. Default: false enabled - (Optional)","title":"Argument Reference"},{"location":"resources/harbor_replication/#attributes-reference","text":"In addition to all argument, the following attributes are exported: id - The id of the registry policy with harbor.","title":"Attributes Reference"},{"location":"resources/harbor_replication/#import","text":"Harbor Projects can be imported using the harbor_replication , e.g. terraform import harbor_replication.helmhub_prometheus 1","title":"Import"},{"location":"resources/harbor_retention_policy/","text":"Resource: harbor_retention_policy \u00b6 Harbor official documentation feature reference: https://goharbor.io/docs/2.0.0/working-with-projects/working-with-images/create-tag-retention-rules/ Example Usage \u00b6 resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_retention_policy\" \"cleanup\" { scope { ref = harbor_project.main.id } rule { template = \"always\" tag_selectors { decoration = \"matches\" pattern = \"master\" extras = jsonencode({ untagged: false }) } scope_selectors { repository { kind = \"doublestar\" decoration = \"repoMatches\" pattern = \"**\" } } } rule { disabled = true template = \"latestPulledN\" params = { \"latestPulledN\" = 15 \"nDaysSinceLastPush\" = 7 } tag_selectors { kind = \"doublestar\" decoration = \"excludes\" pattern = \"master\" extras = jsonencode({ untagged: false }) } scope_selectors { repository { kind = \"doublestar\" decoration = \"repoExcludes\" pattern = \"nginx-*\" } } } trigger { settings { cron = \"0 0 0 * * *\" } } } Argument Reference \u00b6 The following arguments are supported: algorithm - (Optional) Algorithm used to aggregate rules. Defaults to \"or\" . scope - (Required) Describes the (project) scope of this retention policy. rule - (Required) List of retention rules that compose the policy. trigger - (Required) Defines a schedule with a cron rule. Nested Blocks \u00b6 scope \u00b6 Arguments \u00b6 level - (Optional) Defines the level the scope applies to. Defaults to \"project\" . ref - (Required) Reference id (usually project id) the retention policy refers to. rule \u00b6 Arguments \u00b6 disabled - (Optional) Specifies if the rule should be taken in account or not (ie disabled). Defaults to false . action - (Optional) Specifies the action to do if set of rules is matched. Defaults to \"retain\" . template - (Required) kind of rules among the following: latestPushedK : (retain) the most recently pushed # artifacts latestPulledN : (retain) the most recently pulled # artifacts nDaysSinceLastPush : (retain) the artifacts pushed with the last # days nDaysSinceLastPull : (retain) the artifacts pulled with the last # days always : (retain) always params - (Optional) Map of params for the kind of rule (number of days or artifacts associated to the rule template). Defaults to empty map. Note that multiple key-values can be specified instead of only the one matching the template. The other ones would be disabled but recorded as default choice to the associated template within the UI combo-box. tag_selectors - (Required) Describes the image tags on which to apply the rule. scope_selectors - (Required) Describes the image name(s) on which to apply the rule. Attributes \u00b6 id - The id of the rule (currently not used and set to 0 whatever the number of rules). priority - A priority tag to know in which order the set of rules should b performed (currently not used and set to 0 ). tag_selectors \u00b6 Arguments \u00b6 kind - (Optional) The kind of tag selector. Defaults to doublestar . extras - (Optional) Describes extra info for tag selector as a json encoded string, supports mainly the following key value: untagged: (false|true) to match or not the untagged artifacts in the rule. Defaults to \"\" . decoration - (Required) Specifies if the pattern should be matched ( \"matches\" ) or excluded ( \"excludes\" ). pattern - (Required) Describes the pattern that should match (or exclude) image tags scope_selectors \u00b6 Arguments \u00b6 kind - (Optional) The kind of scope selector. Defaults to doublestar . extras - (Optional) Describes extra info for scope selector as a json encoded string, does not support any known key value as now. Defaults to \"\" . decoration - (Required) Specifies if the pattern should be matched ( \"repoMatches\" ) or excluded ( \"repoExcludes\" ). pattern - (Required) Describes the pattern that should match (or exclude) image names trigger \u00b6 Arguments \u00b6 kind - (Optional) The kind of trigger. Defaults to Schedule . settings - (Required) The trigger settings. Attributes \u00b6 references - Reference to an internal job responsible for applying the trigger. settings \u00b6 Arguments \u00b6 cron - (Optional) 6-fields cron pattern for triggering the retention policy execution by cron schedule. Defaults to \"\" (which refers to a \"None\" Schedule). references \u00b6 Attributes \u00b6 job_id - Reference to the internal job id associated to the trigger. Attributes Reference \u00b6 In addition to all arguments, the following attribute is exported: id - The id of the retention policy. Import \u00b6 Harbor Retention policies can be imported using the harbor_retention_policy , e.g. terraform import harbor_retention_policy.cleanup 2","title":"harbor_retention_policy"},{"location":"resources/harbor_retention_policy/#resource-harbor_retention_policy","text":"Harbor official documentation feature reference: https://goharbor.io/docs/2.0.0/working-with-projects/working-with-images/create-tag-retention-rules/","title":"Resource: harbor_retention_policy"},{"location":"resources/harbor_retention_policy/#example-usage","text":"resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_retention_policy\" \"cleanup\" { scope { ref = harbor_project.main.id } rule { template = \"always\" tag_selectors { decoration = \"matches\" pattern = \"master\" extras = jsonencode({ untagged: false }) } scope_selectors { repository { kind = \"doublestar\" decoration = \"repoMatches\" pattern = \"**\" } } } rule { disabled = true template = \"latestPulledN\" params = { \"latestPulledN\" = 15 \"nDaysSinceLastPush\" = 7 } tag_selectors { kind = \"doublestar\" decoration = \"excludes\" pattern = \"master\" extras = jsonencode({ untagged: false }) } scope_selectors { repository { kind = \"doublestar\" decoration = \"repoExcludes\" pattern = \"nginx-*\" } } } trigger { settings { cron = \"0 0 0 * * *\" } } }","title":"Example Usage"},{"location":"resources/harbor_retention_policy/#argument-reference","text":"The following arguments are supported: algorithm - (Optional) Algorithm used to aggregate rules. Defaults to \"or\" . scope - (Required) Describes the (project) scope of this retention policy. rule - (Required) List of retention rules that compose the policy. trigger - (Required) Defines a schedule with a cron rule.","title":"Argument Reference"},{"location":"resources/harbor_retention_policy/#nested-blocks","text":"","title":"Nested Blocks"},{"location":"resources/harbor_retention_policy/#scope","text":"","title":"scope"},{"location":"resources/harbor_retention_policy/#arguments","text":"level - (Optional) Defines the level the scope applies to. Defaults to \"project\" . ref - (Required) Reference id (usually project id) the retention policy refers to.","title":"Arguments"},{"location":"resources/harbor_retention_policy/#rule","text":"","title":"rule"},{"location":"resources/harbor_retention_policy/#arguments_1","text":"disabled - (Optional) Specifies if the rule should be taken in account or not (ie disabled). Defaults to false . action - (Optional) Specifies the action to do if set of rules is matched. Defaults to \"retain\" . template - (Required) kind of rules among the following: latestPushedK : (retain) the most recently pushed # artifacts latestPulledN : (retain) the most recently pulled # artifacts nDaysSinceLastPush : (retain) the artifacts pushed with the last # days nDaysSinceLastPull : (retain) the artifacts pulled with the last # days always : (retain) always params - (Optional) Map of params for the kind of rule (number of days or artifacts associated to the rule template). Defaults to empty map. Note that multiple key-values can be specified instead of only the one matching the template. The other ones would be disabled but recorded as default choice to the associated template within the UI combo-box. tag_selectors - (Required) Describes the image tags on which to apply the rule. scope_selectors - (Required) Describes the image name(s) on which to apply the rule.","title":"Arguments"},{"location":"resources/harbor_retention_policy/#attributes","text":"id - The id of the rule (currently not used and set to 0 whatever the number of rules). priority - A priority tag to know in which order the set of rules should b performed (currently not used and set to 0 ).","title":"Attributes"},{"location":"resources/harbor_retention_policy/#tag_selectors","text":"","title":"tag_selectors"},{"location":"resources/harbor_retention_policy/#arguments_2","text":"kind - (Optional) The kind of tag selector. Defaults to doublestar . extras - (Optional) Describes extra info for tag selector as a json encoded string, supports mainly the following key value: untagged: (false|true) to match or not the untagged artifacts in the rule. Defaults to \"\" . decoration - (Required) Specifies if the pattern should be matched ( \"matches\" ) or excluded ( \"excludes\" ). pattern - (Required) Describes the pattern that should match (or exclude) image tags","title":"Arguments"},{"location":"resources/harbor_retention_policy/#scope_selectors","text":"","title":"scope_selectors"},{"location":"resources/harbor_retention_policy/#arguments_3","text":"kind - (Optional) The kind of scope selector. Defaults to doublestar . extras - (Optional) Describes extra info for scope selector as a json encoded string, does not support any known key value as now. Defaults to \"\" . decoration - (Required) Specifies if the pattern should be matched ( \"repoMatches\" ) or excluded ( \"repoExcludes\" ). pattern - (Required) Describes the pattern that should match (or exclude) image names","title":"Arguments"},{"location":"resources/harbor_retention_policy/#trigger","text":"","title":"trigger"},{"location":"resources/harbor_retention_policy/#arguments_4","text":"kind - (Optional) The kind of trigger. Defaults to Schedule . settings - (Required) The trigger settings.","title":"Arguments"},{"location":"resources/harbor_retention_policy/#attributes_1","text":"references - Reference to an internal job responsible for applying the trigger.","title":"Attributes"},{"location":"resources/harbor_retention_policy/#settings","text":"","title":"settings"},{"location":"resources/harbor_retention_policy/#arguments_5","text":"cron - (Optional) 6-fields cron pattern for triggering the retention policy execution by cron schedule. Defaults to \"\" (which refers to a \"None\" Schedule).","title":"Arguments"},{"location":"resources/harbor_retention_policy/#references","text":"","title":"references"},{"location":"resources/harbor_retention_policy/#attributes_2","text":"job_id - Reference to the internal job id associated to the trigger.","title":"Attributes"},{"location":"resources/harbor_retention_policy/#attributes-reference","text":"In addition to all arguments, the following attribute is exported: id - The id of the retention policy.","title":"Attributes Reference"},{"location":"resources/harbor_retention_policy/#import","text":"Harbor Retention policies can be imported using the harbor_retention_policy , e.g. terraform import harbor_retention_policy.cleanup 2","title":"Import"},{"location":"resources/harbor_robot_account/","text":"Resource: harbor_robot_account \u00b6 Example Usage \u00b6 resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_robot_account\" \"master_robot\" { name = \"god\" description = \"Robot account used to push images to harbor\" project_id = harbor_project.main.id actions = [\"docker_read\", \"docker_write\", \"helm_read\", \"helm_write\"] expires_at = 1643840542 } output \"harbor_robot_account_token\" { value = data.harbor_robot_account.master_robot.token } Argument Reference \u00b6 The following arguments are supported: name - (Required) The of the project that will be created in harbor. description - (Optional) The description of the robot account will be displayed in harbor. project_id - (Required) The project id of the project that the robot account will be associated with. actions - (Optional) expires_at - (Optional) Robot account expirations for Harbor v2 as epoch. Defaults to -1 (no expiration). Attributes Reference \u00b6 In addition to all argument, the following attributes are exported: id - The id of the robot account. token - The token of the robot account. Import \u00b6 Harbor Projects can be imported using the harbor_robot_account , e.g. terraform import harbor_robot_account.master_robot 29","title":"harbor_robot_account"},{"location":"resources/harbor_robot_account/#resource-harbor_robot_account","text":"","title":"Resource: harbor_robot_account"},{"location":"resources/harbor_robot_account/#example-usage","text":"resource \"harbor_project\" \"main\" { name = \"main\" } resource \"harbor_robot_account\" \"master_robot\" { name = \"god\" description = \"Robot account used to push images to harbor\" project_id = harbor_project.main.id actions = [\"docker_read\", \"docker_write\", \"helm_read\", \"helm_write\"] expires_at = 1643840542 } output \"harbor_robot_account_token\" { value = data.harbor_robot_account.master_robot.token }","title":"Example Usage"},{"location":"resources/harbor_robot_account/#argument-reference","text":"The following arguments are supported: name - (Required) The of the project that will be created in harbor. description - (Optional) The description of the robot account will be displayed in harbor. project_id - (Required) The project id of the project that the robot account will be associated with. actions - (Optional) expires_at - (Optional) Robot account expirations for Harbor v2 as epoch. Defaults to -1 (no expiration).","title":"Argument Reference"},{"location":"resources/harbor_robot_account/#attributes-reference","text":"In addition to all argument, the following attributes are exported: id - The id of the robot account. token - The token of the robot account.","title":"Attributes Reference"},{"location":"resources/harbor_robot_account/#import","text":"Harbor Projects can be imported using the harbor_robot_account , e.g. terraform import harbor_robot_account.master_robot 29","title":"Import"},{"location":"resources/harbor_tasks/","text":"Resource: harbor_tasks \u00b6 Example Usage \u00b6 resource \"harbor_tasks\" \"main\" { vulnerability_scan_policy = \"daily\" } Argument Reference \u00b6 The following arguments are supported: vulnerability_scan_policy - (Optional) The frequency of the vulnerability scanning is done. Can be to \"hourly\" , \"daily\" or \"weekly\"","title":"harbor_tasks"},{"location":"resources/harbor_tasks/#resource-harbor_tasks","text":"","title":"Resource: harbor_tasks"},{"location":"resources/harbor_tasks/#example-usage","text":"resource \"harbor_tasks\" \"main\" { vulnerability_scan_policy = \"daily\" }","title":"Example Usage"},{"location":"resources/harbor_tasks/#argument-reference","text":"The following arguments are supported: vulnerability_scan_policy - (Optional) The frequency of the vulnerability scanning is done. Can be to \"hourly\" , \"daily\" or \"weekly\"","title":"Argument Reference"},{"location":"resources/harbor_usergroup/","text":"Resource: harbor_usergroup \u00b6 Example Usage \u00b6 resource \"harbor_usergroup\" \"developers\" { name = \"developers\" type = \"http\" } Argument Reference \u00b6 The following arguments are supported: name - (Required) The name of the user group to be created. ldap_dn - (Optional) The LDAP Group distingish name if type is ldap , defaults to \"\" . type - (Required) The group type: ldap , http or oidc . Attributes Reference \u00b6 In addition to all arguments, the following attribute is exported: id - The id of the group. Import \u00b6 Harbor Usergroups can be imported using the harbor_usergroup , e.g. terraform import harbor_usergroup.developers 5","title":"harbor_usergroup"},{"location":"resources/harbor_usergroup/#resource-harbor_usergroup","text":"","title":"Resource: harbor_usergroup"},{"location":"resources/harbor_usergroup/#example-usage","text":"resource \"harbor_usergroup\" \"developers\" { name = \"developers\" type = \"http\" }","title":"Example Usage"},{"location":"resources/harbor_usergroup/#argument-reference","text":"The following arguments are supported: name - (Required) The name of the user group to be created. ldap_dn - (Optional) The LDAP Group distingish name if type is ldap , defaults to \"\" . type - (Required) The group type: ldap , http or oidc .","title":"Argument Reference"},{"location":"resources/harbor_usergroup/#attributes-reference","text":"In addition to all arguments, the following attribute is exported: id - The id of the group.","title":"Attributes Reference"},{"location":"resources/harbor_usergroup/#import","text":"Harbor Usergroups can be imported using the harbor_usergroup , e.g. terraform import harbor_usergroup.developers 5","title":"Import"}]}